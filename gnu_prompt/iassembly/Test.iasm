
section .text ||
	
    """
	mov eax, "Hello Anoop Kutta"
	mov ebx, eax
	mov ecx, [ebx]
	link fptr, ecx
	call write, fptr
	
	mov eax, "anoop sinha"
	mov ebx, "is"
	mov ecx, "a"
	mov edx, "great"
	mov eex, "man"
	mov efx, " "
	
	mov eax, [eax, efx, ebx, efx, ecx, efx, edx, efx, eex]
	link fptr, eax
	call write, fptr
	
	mov exx, ["sale", "kutte", "jaan", "se", "Maar", "dunga", 47, "se", true, 22.22]
	mov ezx, ["kya re bhghmanya, ab bole sale"]
	link fptr, exx
	call write, fptr
	link fptr, ezx
	call write,  fptr
	
	
	compute vptr, [((2*5)*5)+((2*5)*5)]
	link eax, vptr
	mov ebx, [eax]
	link fptr, ebx
	call write, fptr
	
	
	"""
	
	"""
	compute vptr, [(5+5)]
	link eax, vptr
	compute vptr, [4+4]
	link ebx, vptr
	compute vptr, [3*9]
	link ecx, vptr
    compute vptr, [(False & True) == True] // which is False
    link efx, vptr
	
	mov edx, [eax, ebx, ecx, efx]
	link fptr, edx
	call write, fptr
	"""

	"""
	mov pas, 55 // moving 55 to persistantRegister
	mov pas, 5
	mov edx, [pas]

	link fptr, edx
	call write, fptr


	mov ras, 34 // move 43 in const ras
	mov rbs, [ras] // creating a constant list
	
	mov eax, rbs // moving const list to eax (eTypeReg)
	link fptr, eax
	call write, fptr

	// can not link (persistent type and constant type) to (f, v, c)PTR
	// mov works with all Types of register except (f, v, c) PTR
	// 'load' OpCode can load value to only from (v, f, c)PTR to ((e)Type register)
	// Today create load OpCode and array element access

	"""

	
	"""
	mov edx, "Enter Three Names :  "
	
	mov efx, [edx]
	mov egx, [0, 0, 0]

	link fptr, efx
	call write, fptr

	link fptr, egx
	call read, fptr
	
	// all return value from function will in rptr (in the form of list)
	
	load eax, rptr // get return value from read() function to rptr
	link fptr, eax
	
	
	call write, fptr
	"""
	

	"""
	// List ELement Access
	
	mov eax, 11
	mov ebx, 12
	mov ecx, 13
	mov edx, 14
	mov eex, 15

	mov efx, [eax, ebx, ecx, edx, eex]
	
	mov egx, #efx[4]
	mov ehx, #efx[3]
	mov eix, #efx[2]
	mov ejx, #efx[1]
	mov ekx, #efx[0]

	mov elx, [egx, ehx, eix, ejx, ekx]
	link fptr, elx
	call write, fptr
	call emit, fptr

	"""


	"""
	mov eax, 11
	mov ebx, 12
	mov ecx, 13
	mov edx, 14
	mov eex, 15
	
	compute vptr, [eax + ebx + eex]
	load efx, vptr

	mov egx, [efx]

	link fptr, egx
	call write, fptr
	"""


	"""

	mov eax, ["Hello", 12, 9.9, True, False]
	mov ebx, [#eax[3], #eax[4]]

	link fptr, ebx
	call write, fptr

	"""


	"""
	mov eax, [44, 66, 34, 85, 45]
	compute vptr, [(#eax[1] <= #eax[0])]

	load ebx, vptr
	mov ecx, [ebx]

	link fptr, ecx
	call write, fptr
	"""


	"""
	label start, from_here

	mov ecx, 2
	mov edx, 5

	cmp [ecx > edx] 
	[
		mov eax, [ecx, "is Greater Than", edx]
		link fptr, eax
		call write, fptr
	] 
	elif [ecx == edx]
	[
		mov eax, [ecx, "is equal to", edx]
		link fptr, eax
		call write, fptr
	] 
	else
	[
		mov eax, [ecx, "is not equal to", edx]
		link fptr, eax
		call write, fptr
	]

	label end
	jump from_here

	"""


	"""
	mov eax, 1
	.loop [eax, eax <= 10000, ++eax]
	[
		mov ebx, [eax]
		link fptr, ebx
		call write, fptr
	]
	"""


	mov eax, "Hello"
	mov ebx, "hello"

	cmp [eax == ebx]
	[
		mov ecx, ["Hello Boy"]
		link fptr, ecx
		call emit, fptr
	]
	elif [eax > ebx]
	[
		mov ecx, ["Hello suar"]
		link fptr, ecx
		call emit, fptr
	]
	elif [eax == 0]
	[
		mov ecx, ["Hello zero"]
		link fptr, ecx
		call emit, fptr
	]

	elif [eax < ebx]
	[
		mov ecx, ["Hello Boy is litte"]
		link fptr, ecx
		call write, fptr // nested function call
		call emit, rptr  // nested function call 
	]
	else
	[
		mov ecx, ["No Boy"]
		link fptr, ecx
		call emit, fptr
	]


	// 'link' use to link value from eTypeRegister to (v, c, f, r)Register
	// 'load' use to load value from (v, c, f, r)Register to eTypeRegister
	// 'load' also load value from return by any function including (Stander, User defined)
	// 'eax + 1' is like increment reat of all -, /, *, % are similar

	// Tommorow, i have to implement --> free, clean, .data section( and link with 'mount' OpCOde)
	// left nested function call,
	// left user defined function
	// error handling
	// dict
	// list
	// variable
	// include header
	// pointers
	// enum
	// struct
	// Function, pusha, popa
	// File-io, dict-io, os-io functions
	// string-operations, math-operations, networking lib functions 
	// list, dict, operation functions
	// implement websocket framework by which user can use this language for web development
	// threading functions
	// process functions
	// package-manager, iasm-package-manager
	// type cast functions
	// math functions
	// date time functions
	// JSON and Serialization Functions
	// Networking and HTTP Functions
	// Regex and Pattern Matching
	// string Formation like '\n, \t, \a, \', \", \\\, {var1}, {varb}'
||